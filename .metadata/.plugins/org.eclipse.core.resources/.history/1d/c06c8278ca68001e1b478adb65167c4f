package com.example.crud.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.example.crud.model.Product;
import com.example.crud.model.ProductRowMapper;
import com.example.crud.repository.Constant;
import com.example.crud.repository.ProductRepository;

@Service
public class ProductServiceImpl implements ProductService {

	@Autowired
	ProductRepository productRepository;
	
	@Autowired
	EntityManager entityManager;
	
	 private final JdbcTemplate jdbcTemplate;

	 @Autowired
	 public ProductServiceImpl(JdbcTemplate jdbcTemplate) {
	     this.jdbcTemplate = jdbcTemplate;
	 }

	@Override
	public List<Product> getAllProducts() {
		// TODO Auto-generated method stub
		List<Product> productList = productRepository.findAll();
		return productList;
	}

	@Override
	public Optional<Product> getProduct(long id) {
		// TODO Auto-generated method stub
		return productRepository.findById(id);
	}
	
	@Override
	public List<Product> findByLastUpdate(String date) {
		// TODO Auto-generated method stub
		List<Product> productList = productRepository.findByLastUpdate(date);
		return productList;
	}
	
	@Override
	public List<Product> findByNameAndPrice(String name, String price) {
		// TODO Auto-generated method stub
//		Constant.name = name;
//		Constant.price = price;
//		//Constant.query = doWithEntityManager(name,price);
//		List<Product> productList = productRepository.findByNameAndPrice();
		//String sql = doWithEntityManager(name,price);
//		String sql = """
//		           SELECT id, first_name,last_name,email
//		           FROM employee
//		           LIMIT 100;
//		           """;
		
		   String sql = "SELECT name,price FROM product WHERE id = ? and name=?";
		   return jdbcTemplate.query(sql,new ProductRowMapper(),name,price).stream().collect(Collectors.toList());
	}
	
	public final String doWithEntityManager(String name,String price) {

        StringBuilder builder = new StringBuilder();
        // SELECT
        builder.append("SELECT * from product");
        builder.append(" WHERE name =:" + name);
        builder.append(" and price =:" + price);
        builder.append(";");
        
        String nativeQuery = builder.toString();
        //System.out.println(nativeQuery);
       // Query query = (Query) entityManager.createNativeQuery(nativeQuery, "Product");
        
        System.out.println("Query String : " + nativeQuery);
        
        return nativeQuery;
	}

	@Override
	public Product addProduct(Product product) {
		// TODO Auto-generated method stub
		return productRepository.save(product);
	}
	
	@Override
	public Product addManyProduct(List<Product> product) {
		// TODO Auto-generated method stub
		return (Product) productRepository.saveAll(product);
	}

	@Override
	public Product updateProduct(Product product) {
		// TODO Auto-generated method stub
		return productRepository.save(product);
	}

	@Override
	public Optional<Product> deleteProduct(long id) {
		// TODO Auto-generated method stub
		 productRepository.deleteById(id);
		return productRepository.findById(id);
	}
}
